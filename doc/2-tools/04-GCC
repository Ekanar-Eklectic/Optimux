# Tool Chain: GCC
# Build and install as oml

# Optimize build with some flags.
export   CFLAGS="-march=native -pipe -fno-semantic-interposition "
export  CFLAGS+="-falign-functions=32 -flimit-function-alignment -malign-data=cacheline "
export  CFLAGS+="-fzero-call-used-regs=used"
export CFLAGS="-march=native -pipe -fno-semantic-interposition "
export LDFLAGS="-Wl,-O2 -Wl,--as-needed "

# Additional sources to add as GCC requires them 
xz -cd ../pkgs/mpfr-4.1.0.tar.xz | tar -xf -
mv -v mpfr-4.1.0 mpfr
xz -cd ../pkgs/gmp-6.2.1.tar.xz | tar -xf -
mv -v gmp-6.2.1 gmp
gunzip -cd ../pkgs/mpc-1.2.1.tar.gz | tar -xf -
mv -v mpc-1.2.1 mpc
tar xf ../pkgs/isl-0.24.tar.xz
mv -v isl-0.24 isl

# The target build is finding the host libstdc++'s <fenv.h>, fix it
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100017#c7
patch -Np1 -i ../patches/gcc-mlfs-11.2.0/fix_fenv_header.patch

# Apply patches for MUSL support
bash ../patches/gcc-alpine/apply_patches_ct.sh

# Re-create internal header
cat gcc/{limitx,glimits,limity}.h > \
  $(dirname $($OML_TARGET-gcc -print-libgcc-file-name))/include-fixed/limits.h

## Change the location of GCC's default dynamic linker to use the one installed in /tools
#
# For i686/x86_64:
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's/\/lib\(64\)\?\(32\)\?\/ld/\/tools&/g' \
      -e 's/\/usr/\/tools/g' ${file}.orig > ${file}
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> ${file}
  touch ${file}.orig
done

# Build in dedicated build directory
mkdir -v build && cd build

# Disable some features
export  OFFF="--disable-libstdcxx-pch "
export OFFF+="--disable-multilib "
export OFFF+="--disable-bootstrap " 
export OFFF+="--disable-libgomp "
export OFFF+="--disable-libquadmath " 
export OFFF+="--disable-libssp "
export OFFF+="--disable-libvtv "
export OFFF+="--disable-symvers "
export OFFF+="--disable-libitm "
export OFFF+="--disable-libsanitizer " 

# Enable graphite
export GON="--with-ppl --with-cloog "

# Enable LTO
export XTRA="--enable-lto "

# Configure source
CFLAGS="-g0 -O0 $CFLAGS" \
CXXFLAGS="-g0 -O0 $CFLAGS" \
CC="${OML_TARGET}-gcc" \
CXX="${OML_TARGET}-g++" \
AR="${OML_TARGET}-ar" \
AS="${OML_TARGET}-as" \
RANLIB="${OML_TARGET}-ranlib" \
LD="${OML_TARGET}-ld" \
STRIP="${OML_TARGET}-strip" \
../configure                                       \
    --target=${OML_TARGET}                        \
    --build=${OML_HOST}                           \
    --host=${OML_TARGET}                          \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++ \
    --with-pkgversion="Optimux-Tools 1.0.0" $OFFF $XTRA $GON

# Compile
PATH=/bin:/usr/bin:/cross-tools/bin:/tools/bin make

# Install
make install

# Per LFS book explanation:
# Many programs and scripts run cc instead of gcc, which is used 
# to keep programs generic and therefore usable on all kinds 
# of UNIX systems where the GNU C compiler is not always 
# installed. Running cc leaves the system administrator free 
# to decide which C compiler to install. Create a link:
ln -sv gcc /tools/bin/cc

# Test toolchain
echo 'int main(){}' > dummy.c &&
gcc dummy.c
readelf -l a.out | grep ': /tools'
rm -v dummy.c a.out

unset CFLAGS CXXFLAGS LDFLAGS OFFF XTRA GON
